/// ===========================================================
/// fileName       : day14_trycatch
/// date           : 2024-02-18
/// description    :
/// - 예외 처리
///  오류 발생 가능성이 있는 코드에 대해 미리 예외처리를 해주는 것.
/// ===========================================================
void main() {
  try {
    /*
      문제가 발생될 수 있는 코드 작성
      // 파일 읽기, 네트워크 통신 ... 등 // 왠만해선 오류가 발생안함. 오류 발생가능성 자체가 적기 때문.  오류를 발생 시키려면 어떠한 동작 필요
     */
    double result = 10 / 0;
    func();
  } on Exception catch(e){ // 귀찮아서 잘 쓰이지는 안흔ㄴ다.
    // 예외가 던져진 상태일 때, 그 타입이 예외 타입이 동일할 때만
    // 여기에가 실행됨.
  } catch (e) { // 이 오류가 정확히 어디서 발생 했는지 확인 Stacktrace. 이건 있어도 되고, 없어돋 ㅚㅁ
  // } catch (e) { // 이 오류가 정확히 어디서 발생 했는지 확인 Stacktrace. 이건 있어도 되고, 없어돋 ㅚㅁ
  // } catch (e, stack) { // 이 오류가 정확히 어디서 발생 했는지 확인 Stacktrace. 이건 있어도 되고, 없어돋 ㅚㅁ
    /*문제 발생 시 대체할 코드 */ // e.g) 파일을 실행한다-> case1)파일이 없거나 case2) 파일 권한이 없는 경우 발생하는 오류를 여기서 처리함
    //  토스트 메시지 등으로 안내 메시지 호출
    //  부가적으로 로그를 기록(기기 내부, 서버로 송신)
    //  ㄴ로그를 송신하는 시점 : 1일 단위 또는 1주일 단위 등 시점에 서버로 송신.
    print(e); // e 의  Type: Object
  } // assert 타입에은 릴리스가 아닌 경우에만 활성화 됨. 예외문들이 어설트 타입으로 적혀있음. rint단계?에서 예외문을 확인을 한다.

}

void func() {
  throw Exception("문제 발생!!");
}