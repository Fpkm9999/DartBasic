// ignore_for_file: slash_for_doc_comments

/**
 * ===========================================================
 * fileName       : day12_interface
 * date           : 2024-02-04
 * description    :
 * - 인터페이스 (Interface)
 *  메소드 구현만 강제하는 기능
 *  DART에서는 전용 키워드인 interface 같은 키워드를 제공하지 않음
 *
 * - 일반 클래스 상속 vs 추상 클래스 vs 인터페이스
 *   공통 : 추상 메소드, 추상 액세서 가능
 *   일반 클래스(상속)  : 직접 생성 가능, 멤버변수 선언 및 상속 가능, 다중 상속 불가
 *   추상 클래스(상속): 직접 생성 불가능, 멤버변수 선언 가능, 다중 상속 불가능
 *   인터페이스(구현) : 직접 생성 불가능, 멤버변수 선언 불가능, 다중 구현이 가능함
 *    >>> 인터페이스는 메소드만 강제함.
 *
 *    >>> 직접 생성 가낭하다는 것 : 이미 구현 완료, 그 자체로 의미가 있음
 *    >>> 직접 생성 불가능 : 아직 구현되지 않은 부분이 존재한다는 의미. 그저 개념적으로만 의미가 있음 => 바로 사용 불가
 *    >>> 멤버 변수 선언/상속 가능 : 상태 값을 지님
 *        멤버 변수 선언/상속 불가능 : 상호 간의 기능만 연결
 *    >>> 다중 상속 불가 : 기회가 1회 => 사용성에 있어서 분리함. => 종류 제한하는 용도로 많이 씀
 *        다중 구현 가능 : 기회가 N 회 => 사용성에 있어서 유리함. => 종류 제한 없음
 *
 *        문법을 떠나서 보면, 사용성에 유리한 순위
 *        전략 > 인터페이스 > 추상 클래스 > 일반 클래스 상속
 *        그래서 전략과 인터페이스를 기본적으로 많이 사용하되 필요에 따라 추상 일반 클래스상속을 사용
 *
 *   - 다형성
 *     객체 간 변환 e.g 동물 > 사람/개/고양이 등으로 변환 가능 : 명시적 캐스팅
 *                          사람/개/고양이 > 동물 변환 가능 : 묵시적 캐스팅
 * ===========================================================
 */

abstract class Interface {
  int parentField = 100;
}
class Impl implements Interface {
  @override
  int parentField = 20;
}